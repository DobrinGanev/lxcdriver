// Generated by CoffeeScript 1.9.3
(function() {
  var LXC, exec, execute, fs, util;

  util = require('util');

  exec = require('child_process').exec;

  fs = require('fs');

  execute = function(command, callback) {
    if (command == null) {
      callback(new Error("command not given"));
    }
    util.log("executing " + command + "...");
    return exec(command, (function(_this) {
      return function(error, stdout, stderr) {
        if (error) {
          return callback(error);
        } else {
          return callback(true);
        }
      };
    })(this));
  };

  LXC = (function() {
    function LXC(name) {
      if (name == null) {
        throw new Error("Container Name not given");
      }
      this.name = name;
      this.state = "initialized";
    }

    LXC.prototype.exists = function(callback) {
      var command;
      command = "lxc-info -n " + this.name + " ";
      util.log("executing " + command + "...");
      return execute(command, (function(_this) {
        return function(result) {
          return callback(result);
        };
      })(this));
    };

    LXC.prototype.create = function(template, callback) {
      if (template == null) {
        throw new Error;
      }
      if (!(this.state === "initialized" || this.state === "destroyed")) {
        return callback(new Error("Called in Wrond time"));
      }
      return this.exists((function(_this) {
        return function(result) {
          var command;
          if (result instanceof Error) {
            command = "lxc-create -n " + _this.name + " -t " + template + " ";
            return execute(command, function(result) {
              if (result instanceof Error) {
                _this.state = "failed";
              }
              if (result === true) {
                _this.state = "created";
              }
              return callback(result);
            });
          } else {
            _this.state = "exists";
            return callback(new Error("Exists"));
          }
        };
      })(this));
    };

    LXC.prototype.clone = function(refimage, callback) {
      if (refimage == null) {
        return callback(new Error("Refimage name not given"));
      }
      if (!(this.state === "initialized" || this.state === "destroyed")) {
        return callback(new Error("Called in Wrond time"));
      }
      return this.exists((function(_this) {
        return function(result) {
          var command;
          if (result instanceof Error) {
            command = "lxc-clone  -o " + refimage + " -n " + _this.name + " ";
            return execute(command, function(result) {
              if (result instanceof Error) {
                _this.state = "failed";
              }
              if (result === true) {
                _this.state = "cloned";
              }
              return callback(result);
            });
          } else {
            _this.state = "exists";
            return callback(new Error("Exists"));
          }
        };
      })(this));
    };

    LXC.prototype.start = function(callback) {
      var command;
      if (!(this.state === "created" || this.state === "cloned")) {
        return callback(new Error("Called in Wrond time"));
      }
      command = "lxc-start -n " + this.name + " -d ";
      return execute(command, (function(_this) {
        return function(result) {
          if (result instanceof Error) {
            _this.state = "failed";
          }
          if (result === true) {
            _this.state = "started";
          }
          return callback(result);
        };
      })(this));
    };

    LXC.prototype.stop = function(callback) {
      var command;
      if (this.state !== "started") {
        return callback(new Error("Called in Wrond time"));
      }
      command = "lxc-stop -n " + this.name + " ";
      return execute(command, (function(_this) {
        return function(result) {
          if (result instanceof Error) {
            _this.state = "failed";
          }
          if (result === true) {
            _this.state = "stopped";
          }
          return callback(result);
        };
      })(this));
    };

    LXC.prototype.destroy = function(callback) {
      var command;
      if (this.state !== "stopped") {
        return callback(new Error("Called in Wrond time"));
      }
      command = "lxc-destroy -n " + this.name + " ";
      return execute(command, (function(_this) {
        return function(result) {
          if (result instanceof Error) {
            _this.state = "failed";
          }
          if (result === true) {
            _this.state = "destroyed";
          }
          return callback(result);
        };
      })(this));
    };

    LXC.prototype.runningstatus = function(callback) {
      var command;
      command = "lxc-ls --running " + this.name + " ";
      return exec(command, (function(_this) {
        return function(error, stdout, stderr) {
          if (error != null) {
            util.log("lxcdriver: execute - Error : " + error);
          }
          util.log("lxcdriver: execute - stdout : " + stdout);
          if (stderr != null) {
            util.log("lxcdriver: execute - stderr : " + stderr);
          }
          if (error || (stdout == null)) {
            return callback("notrunning");
          } else {
            return callback("running");
          }
        };
      })(this));
    };

    LXC.prototype.appendFile = function(filename, text) {
      var path;
      if (this.state !== "created") {
        return callback(new Error("Called in Wrond time"));
      }
      path = "/var/lib/lxc/" + this.name + "/rootfs";
      filename = path + filename;
      util.log("appendFile ..filename is ", filename);
      fs.appendFileSync(filename, text);
      return true;
    };

    LXC.prototype.writeFile = function(filename, text) {
      var path;
      if (this.state !== "created") {
        return callback(new Error("Called in Wrond time"));
      }
      path = "/var/lib/lxc/" + this.name + "/rootfs";
      filename = path + filename;
      util.log("writeFile ..filename is ", filename);
      fs.writeFileSync(filename, text);
      return true;
    };

    LXC.prototype.deleteFile = function(filename) {
      var path;
      if (this.state !== "created") {
        return callback(new Error("Called in Wrond time"));
      }
      path = "/var/lib/lxc/" + this.name + "/rootfs";
      filename = path + filename;
      util.log("deleteFile ..filename is ", filename);
      fs.unlinkSync(filename);
      return true;
    };

    LXC.prototype.addEthernetInterface = function(vethname, hwAddress) {
      var filename, text;
      if (this.state !== "created") {
        return callback(new Error("Called in Wrond time"));
      }
      util.log(" addEthernetInterface " + this.name + "  vethname " + vethname + "  hwAddress " + hwAddress + " ");
      filename = "/var/lib/lxc/" + this.name + "/config";
      util.log(" filname " + filename);
      text = "\nlxc.network.type = veth \nlxc.network.hwaddr= " + hwAddress + " \nlxc.network.veth.pair = " + vethname + " \nlxc.network.flags = up";
      fs.appendFileSync(filename, text);
      return true;
    };

    LXC.prototype.updateIPaddress = function(ifname, ipaddress, netmask, gateway) {
      var filename, text;
      if (this.state !== "created") {
        return callback(new Error("Called in Wrond time"));
      }
      filename = "/var/lib/lxc/" + this.name + "/rootfs/etc/network/interfaces";
      if (gateway != null) {
        text = "\nauto " + ifname + "\niface " + ifname + " inet static \n\t address " + ipaddress + " \n\t netmask " + netmask + " \n\t gateway " + gateway + "\n";
      }
      if (gateway == null) {
        text = "\nauto " + ifname + "\niface " + ifname + " inet static \n\t address " + ipaddress + " \n\t netmask " + netmask + " \n";
      }
      fs.appendFileSync(filename, text);
      return true;
    };

    LXC.prototype.clearInterfaceFile = function() {
      var filename;
      if (this.state !== "created") {
        return callback(new Error("Called in Wrond time"));
      }
      filename = "/var/lib/lxc/" + this.name + "/rootfs/etc/network/interfaces";
      fs.unlinkSync(filename);
      return true;
    };

    LXC.prototype.updateHostStartupScript = function() {
      var agentcmd, filename, iperf1, iperf2;
      if (this.state !== "created") {
        return callback(new Error("Called in Wrond time"));
      }
      filename = "/var/lib/lxc/" + this.name + "/rootfs/etc/init.d/rc.local";
      agentcmd = "\nnodejs /node_modules/testagent/lib/app.js > /var/log/testagent.log & \n";
      iperf1 = "iperf -s > /var/log/iperf_tcp_server.log & \n";
      iperf2 = "iperf -s -u > /var/log/iperf_udp_server.log & \n";
      fs.appendFileSync(filename, agentcmd);
      fs.appendFileSync(filename, iperf1);
      return fs.appendFileSync(filename, iperf2);
    };

    LXC.prototype.updateRouterConfig = function(ifmap, containerName) {
      var i, j, k, len, len1, ospfconf, ospffile, zebraconf, zebrafile;
      if (this.state !== "created") {
        return callback(new Error("Called in Wrond time"));
      }
      zebrafile = "/var/lib/lxc/" + this.name + "/rootfs/etc/zebra.conf";
      ospffile = "/var/lib/lxc/" + this.name + "/rootfs/etc/ospf.conf";
      zebraconf = "hostname zebra \npassword zebra \nenable password zebra \n";
      for (j = 0, len = ifmap.length; j < len; j++) {
        i = ifmap[j];
        zebraconf += "interface  " + i.ifname + " \n";
        if (i.type === "wan") {
          zebraconf += "   ip address " + i.ipaddress + "/30 \n";
        }
        if (i.type === "lan") {
          zebraconf += "   ip address " + i.ipaddress + "/27 \n";
        }
        if (i.type === "mgmt") {
          zebraconf += "   ip address " + i.ipaddress + "/24 \n";
        }
      }
      util.log("zebrafile " + zebraconf);
      fs.appendFileSync(zebrafile, zebraconf);
      ospfconf = "hostname ospf \npassword zebra \nenable password zebra \nrouter ospf\n  ";
      for (k = 0, len1 = ifmap.length; k < len1; k++) {
        i = ifmap[k];
        if (i.type !== "mgmt") {
          ospfconf += "   network " + i.ipaddress + "/24 area 0 \n";
        }
      }
      util.log("ospfd fils", ospfconf);
      return fs.appendFileSync(ospffile, ospfconf);
    };

    LXC.prototype.updateRouterStartupScript = function() {
      var filename, ospfcmd, zebracmd;
      if (this.state !== "created") {
        return callback(new Error("Called in Wrond time"));
      }
      util.log("in updateRouterStartupScript ");
      filename = "/var/lib/lxc/" + this.name + "/rootfs/etc/init.d/rc.local";
      zebracmd = "\n/usr/lib/quagga/zebra -f /etc/zebra.conf -d & \n";
      ospfcmd = "/usr/lib/quagga/ospfd -f /etc/ospf.conf -d & \n";
      util.log("zebracmd " + zebracmd);
      util.log("ospfdcmd " + ospfcmd);
      fs.appendFileSync(filename, zebracmd);
      fs.appendFileSync(filename, ospfcmd);
    };

    LXC.prototype.destructor = function() {
      return this.stop((function(_this) {
        return function(result) {
          return _this.destroy(function(result) {
            return console.log("result", result);
          });
        };
      })(this));
    };

    return LXC;

  })();

  module.exports = LXC;

}).call(this);
